core 1=main FluidNC thread/task, 0=my UI and other tasks


X pixelTask    		priority:1 stack:4096  core:0
X gDisplayTask 		priority:1 stack:10240 core:default 0?
O screenGrabTask  	priority:1 stack:8192  core:0           #if WITH_SCREEN_GRAB
O meshTask     		priority:1 stack:4096  core:0		#if USE_MESH_TASK *should* give compiler error


FluidNC defines
	CONFIG_ARDUINO_RUNNING_CORE == 1
	SUPPORT_TASK_CORE = 1

O limitCheckTask 	priority:5 stack:2048  core:default  	#ifdef LATER

O I2SOutTask		priority:1 stack:4096  core:1		from i2s_out_init() "must run on same core"
X shiftInTask     	priority:1 stack:4096  core:1		i2SIBus.cpp   if _use_shift_in
O monitorI2SInTask 	priority:1 stack:4096  core:1		!use_shift_in => i2s_in_init() #ifdef MONITOR_I2S_IN (defined)
O servoUpdateTask		priority:1 stack:4906  core:1


In protocol.cpp


Serial.cpp::pollClients(realtime_only)
    called with false ONLY from top of protocol_main_loop()
	report_status_message(execute_line until there is room to give the line to the gcode interpreter
	and otherwise, called with TRUE
		from protocol_do_alarm() on soft or hard limit
		and protocol_exec_rt_system() while waiting for line to execute or next line to be available

    psudocode:
	for (auto client : clientq)
	        auto source = client->_in;
        	int  c      = source->read();
		realtime-commands
            	if (realtime_only)
            		log_error("Only realtime commands are allowed");
                	client->_linelen = 0;
                	continue;
		add to linebuffer
		display("GCODE", client->_line and returns client if line is ready

	if (realtime_only)
        	return NULL;

	WebUI::COMMANDS::handle();  // Handles feeding watchdog and ESP restart
	WebUI::wifi_services.handle();  // OTA, web_server, telnet_server polling

	if (sdcard && sdcard->_readyNext) {
        	return sdcard->getClient() if line returned OK
		report error if not

	return NULL


So, the WebUI only does "realtime commands" while a gcode line is pending and/or a
"job" is running.

HOW ARE LIMITS checked?


void IRAM_ATTR Stepper::pulse_func() is the main workhorse
		it calls probe::tripped() if probing

limit pins are attached to change ISR's
		and directly call mc_reset() (if not homing, etc) and
		and set rtAlarm = ExecAlarm::HardLimit
I2SI limit pins are "read" by shiftIn task at 100Hz if use_shift_in
        or at 1Mhz? if by DMA if !use_shift_in
		and call the interrupt handlers as if they were real pins,
Ergo, the shiftInTask (use_shift_in) is needed
		or the DMA interrupt is even more processor intensive.
		BUT none of this is in the UI
